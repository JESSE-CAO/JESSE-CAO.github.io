console.log("change");
(function (a, b) {
    if ("function" == typeof define && define.amd) define([], b);
    else if ("undefined" != typeof exports) b();
    else {
        b(), (a.FileSaver = { exports: {} }.exports);
    }
})(this, function () {
    "use strict";

    function b(a, b) {
        return (
            "undefined" == typeof b ? (b = { autoBom: !1 }) : "object" != typeof b && (console.warn("Deprecated: Expected third argument to be a object"), (b = { autoBom: !b })),
            b.autoBom && /^\s*(?:text\/\S*|application\/xml|\S*\/\S*\+xml)\s*;.*charset\s*=\s*utf-8/i.test(a.type) ? new Blob(["\uFEFF", a], { type: a.type }) : a
        );
    }
    function c(a, b, c) {
        var d = new XMLHttpRequest();
        d.open("GET", a),
            (d.responseType = "blob"),
            (d.onload = function () {
                g(d.response, b, c);
            }),
            (d.onerror = function () {
                console.error("could not download file");
            }),
            d.send();
    }
    function d(a) {
        var b = new XMLHttpRequest();
        b.open("HEAD", a, !1);
        try {
            b.send();
        } catch (a) {}
        return 200 <= b.status && 299 >= b.status;
    }
    function e(a) {
        try {
            a.dispatchEvent(new MouseEvent("click"));
        } catch (c) {
            var b = document.createEvent("MouseEvents");
            b.initMouseEvent("click", !0, !0, window, 0, 0, 0, 80, 20, !1, !1, !1, !1, 0, null), a.dispatchEvent(b);
        }
    }
    var f =
            "object" == typeof window && window.window === window
                ? window
                : "object" == typeof self && self.self === self
                ? self
                : "object" == typeof global && global.global === global
                ? global
                : void 0,
        a = /AppleWebKit/.test(navigator.userAgent),
        g =
            f.saveAs ||
            ("object" != typeof window || window !== f
                ? function () {}
                : "download" in HTMLAnchorElement.prototype && !a
                ? function (b, g, h) {
                      var i = f.URL || f.webkitURL,
                          j = document.createElement("a");
                      (g = g || b.name || "download"),
                          (j.download = g),
                          (j.rel = "noopener"),
                          "string" == typeof b
                              ? ((j.href = b), j.origin === location.origin ? e(j) : d(j.href) ? c(b, g, h) : e(j, (j.target = "_blank")))
                              : ((j.href = i.createObjectURL(b)),
                                setTimeout(function () {
                                    i.revokeObjectURL(j.href);
                                }, 4e4),
                                setTimeout(function () {
                                    e(j);
                                }, 0));
                  }
                : "msSaveOrOpenBlob" in navigator
                ? function (f, g, h) {
                      if (((g = g || f.name || "download"), "string" != typeof f)) navigator.msSaveOrOpenBlob(b(f, h), g);
                      else if (d(f)) c(f, g, h);
                      else {
                          var i = document.createElement("a");
                          (i.href = f),
                              (i.target = "_blank"),
                              setTimeout(function () {
                                  e(i);
                              });
                      }
                  }
                : function (b, d, e, g) {
                      if (((g = g || open("", "_blank")), g && (g.document.title = g.document.body.innerText = "downloading..."), "string" == typeof b)) return c(b, d, e);
                      var h = "application/octet-stream" === b.type,
                          i = /constructor/i.test(f.HTMLElement) || f.safari,
                          j = /CriOS\/[\d]+/.test(navigator.userAgent);
                      if ((j || (h && i) || a) && "undefined" != typeof FileReader) {
                          var k = new FileReader();
                          (k.onloadend = function () {
                              var a = k.result;
                              (a = j ? a : a.replace(/^data:[^;]*;/, "data:attachment/file;")), g ? (g.location.href = a) : (location = a), (g = null);
                          }),
                              k.readAsDataURL(b);
                      } else {
                          var l = f.URL || f.webkitURL,
                              m = l.createObjectURL(b);
                          g ? (g.location = m) : (location.href = m),
                              (g = null),
                              setTimeout(function () {
                                  l.revokeObjectURL(m);
                              }, 4e4);
                      }
                  });
    (f.saveAs = g.saveAs = g), "undefined" != typeof module && (module.exports = g);
});

$(function () {
    if (window.parent != window) {
        document.querySelector(".page-footer").style.display = "none";
        document.querySelector(".page-header").style.display = "none";
        $("body").on("click", "a", function (ev) {
            ev.stopPropagation();
            ev.preventDefault();
            window.open($(this).attr("href"), "_blank");
        });
    }
    var timer = setInterval(() => {
        if ($("._group.active").length) {
            load_team_img();
            clearInterval(timer);
        }
    });
    setTimeout(() => {
        clearInterval(timer);
    }, 10000);
    function load_team_img() {
        $("._group.active")
            .find(".item_image")
            .css({
                backgroundImage: function () {
                    return $(this).attr("data-image");
                },
            })
            .find("img")
            .attr("src", function () {
                return $(this).attr("data-image");
            });
        new WOW({ boxClass: "_group.active .effect", scrollContainer: "body" }).init();
    }
    $(".page").each(function (index, el) {
        $(el)
            .find(".button_add_more")
            .on("click", function () {
                if ($("._group.active").next()) {
                    $("._group.active").removeClass("active").next().addClass("active");
                    load_team_img();
                }
            });
        load_team_img();
    });
    $("a:not([download])")
        .off("click")
        .on("click", function () {
            var src = $(this).attr("href");
            var ext = /.+\.+(.+$)/.exec(src);
            if (ext && ext[1]) {
                if (["png", "jpg"].includes(ext[1])) {
                    Download_Img(src, $(this).text() + "." + ext[1]);
                    return false;
                } else if ("pdf" == ext[1].toLowerCase()) {
                    openDownloadDialog(src, $(this).text().trim() + ".pdf");
                    return false;
                }
            }
        });
});

var openDownloadDialog = (url, saveName) => {
    if (typeof url === "object" && url instanceof Blob) {
        url = URL.createObjectURL(url); // 创建blob地址
    }
    var aLink = document.createElement("a");
    aLink.href = url;
    aLink.download = saveName;
    document.body.appendChild(aLink);
    aLink.click();
    document.body.removeChild(aLink);
};

function Download_Img(src, title) {
    var canvas = document.createElement("canvas");
    var img = document.createElement("img");
    img.onload = function (e) {
        canvas.width = img.width;
        canvas.height = img.height;
        var context = canvas.getContext("2d");
        context.drawImage(img, 0, 0, img.width, img.height);
        canvas.getContext("2d").drawImage(img, 0, 0, img.width, img.height);
        canvas.toBlob((blob) => {
            let link = document.createElement("a");
            link.href = window.URL.createObjectURL(blob);
            link.download = title;
            link.click();
        }, "image/*");
    };
    img.setAttribute("crossOrigin", "Anonymous");
    img.src = src;
}

$(".header-search_btn").on("click", function () {
    $(this).toggleClass("open");
});
$(".header-search_btn .search_input").on("click", function () {
    return false;
});

$(".search_input input").on("keydown", function (ev) {
    if (ev.keyCode == 13) {
        window.open("/search.html?keyword=" + $(this).val(), "_blank");
    }
});

$(".page-search_input_wrapper input").on("keydown", function (ev) {
    if (ev.keyCode == 13) {
        window.open("/search.html?keyword=" + $(this).val(), "_self");
    }
});
$(".page-search_input_wrapper .iconfont").on("click", function (ev) {
    window.open("/search.html?keyword=" + $(this).closest(".page-search_input_wrapper").find("input").val(), "_self");
});

$(function () {
    new WOW({
        boxClass: "effect",
        animateClass: "animated",
        offset: 0,
        mobile: true,
        live: true,
    }).init();
});
